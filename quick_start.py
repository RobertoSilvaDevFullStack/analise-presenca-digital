#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de inicializa√ß√£o r√°pida
Configura e inicia o projeto automaticamente
"""

import os
import subprocess
import shutil
import time
from pathlib import Path

def run_command(command, cwd=None, shell=True):
    """Executa um comando e retorna o resultado"""
    try:
        result = subprocess.run(command, shell=shell, cwd=cwd, 
                              capture_output=True, text=True)
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, "", str(e)

def check_requirements():
    """Verifica se os requisitos est√£o instalados"""
    print("üîç Verificando requisitos...")
    
    # Verificar Docker
    success, _, _ = run_command("docker --version")
    if not success:
        print("‚ùå Docker n√£o encontrado. Instale o Docker Desktop.")
        return False
    print("‚úÖ Docker encontrado")
    
    # Verificar Docker Compose
    success, _, _ = run_command("docker-compose --version")
    if not success:
        print("‚ùå Docker Compose n√£o encontrado.")
        return False
    print("‚úÖ Docker Compose encontrado")
    
    return True

def setup_env_file():
    """Configura o arquivo .env se n√£o existir"""
    print("üìÅ Configurando arquivo .env...")
    
    env_path = Path("backend/.env")
    env_example_path = Path("backend/.env.example")
    
    if env_path.exists():
        print("‚úÖ Arquivo .env j√° existe")
        return True
    
    if not env_example_path.exists():
        print("‚ùå Arquivo .env.example n√£o encontrado")
        return False
    
    # Copiar .env.example para .env
    shutil.copy(env_example_path, env_path)
    print("‚úÖ Arquivo .env criado a partir do .env.example")
    
    print("‚ö†Ô∏è  IMPORTANTE: Configure as seguintes vari√°veis no backend/.env:")
    print("   - GEMINI_API_KEY (obrigat√≥rio para IA)")
    print("   - N8N_WEBHOOK_SECRET (gere uma senha segura)")
    print("   - N8N_AUTH_USER e N8N_AUTH_PASSWORD (para acessar n8n)")
    print("   - SUPABASE_URL e SUPABASE_KEY (se usar Supabase)")
    
    return True

def build_and_start():
    """Constr√≥i e inicia os containers"""
    print("üê≥ Construindo e iniciando containers...")
    
    # Parar containers existentes
    print("   Parando containers existentes...")
    run_command("docker-compose -f docker-compose-with-n8n.yml down")
    
    # Construir imagens
    print("   Construindo imagens...")
    success, stdout, stderr = run_command(
        "docker-compose -f docker-compose-with-n8n.yml build --no-cache"
    )
    
    if not success:
        print(f"‚ùå Erro ao construir: {stderr}")
        return False
    
    # Iniciar servi√ßos
    print("   Iniciando servi√ßos...")
    success, stdout, stderr = run_command(
        "docker-compose -f docker-compose-with-n8n.yml up -d"
    )
    
    if not success:
        print(f"‚ùå Erro ao iniciar: {stderr}")
        return False
    
    print("‚úÖ Containers iniciados com sucesso")
    return True

def wait_for_services():
    """Aguarda os servi√ßos ficarem prontos"""
    print("‚è≥ Aguardando servi√ßos ficarem prontos...")
    
    import requests
    
    services = {
        "Backend": "http://localhost:5000/health",
        "Frontend": "http://localhost",
        "n8n": "http://localhost:5678"
    }
    
    max_attempts = 30
    for service, url in services.items():
        print(f"   Verificando {service}...")
        
        for attempt in range(max_attempts):
            try:
                response = requests.get(url, timeout=5)
                if response.status_code == 200:
                    print(f"   ‚úÖ {service} pronto")
                    break
            except:
                pass
            
            if attempt < max_attempts - 1:
                time.sleep(2)
        else:
            print(f"   ‚ö†Ô∏è  {service} pode n√£o estar pronto ainda")
    
    print("‚úÖ Verifica√ß√£o de servi√ßos conclu√≠da")

def show_next_steps():
    """Mostra os pr√≥ximos passos"""
    print("\nüéâ SETUP CONCLU√çDO!")
    print("=" * 50)
    
    print("\nüîó Acesse os servi√ßos:")
    print("   Frontend: http://localhost")
    print("   Backend API: http://localhost:5000")
    print("   n8n Interface: http://localhost:5678")
    
    print("\nüìã Pr√≥ximos passos:")
    print("   1. Configure as vari√°veis no backend/.env")
    print("   2. Importe o workflow n8n (n8n-workflow-example.json)")
    print("   3. Teste a an√°lise b√°sica no frontend")
    print("   4. Teste a an√°lise com IA")
    
    print("\nüîß Comandos √∫teis:")
    print("   Verificar status: python check_system.py")
    print("   Ver logs: docker-compose -f docker-compose-with-n8n.yml logs")
    print("   Parar: docker-compose -f docker-compose-with-n8n.yml down")
    print("   Reiniciar: docker-compose -f docker-compose-with-n8n.yml restart")
    
    print("\nüìö Documenta√ß√£o:")
    print("   Guia completo: GUIA_IMPLEMENTACAO_IA.md")
    print("   Documenta√ß√£o t√©cnica: DOCUMENTACAO_TECNICA_IA.md")
    print("   README: README.md")

def main():
    print("üöÄ SETUP R√ÅPIDO - An√°lise de Presen√ßa Digital com IA")
    print("=" * 60)
    
    # Verificar se estamos no diret√≥rio correto
    if not os.path.exists("docker-compose-with-n8n.yml"):
        print("‚ùå Execute este script no diret√≥rio raiz do projeto")
        return
    
    # Verificar requisitos
    if not check_requirements():
        print("\n‚ùå Requisitos n√£o atendidos. Instale Docker e Docker Compose.")
        return
    
    # Configurar .env
    if not setup_env_file():
        print("\n‚ùå Erro ao configurar arquivo .env")
        return
    
    # Perguntar se deve continuar
    print("\n‚ö†Ô∏è  ATEN√á√ÉO: Este script ir√°:")
    print("   - Parar containers existentes")
    print("   - Reconstruir todas as imagens")
    print("   - Iniciar todos os servi√ßos")
    print("   - Isso pode levar alguns minutos")
    
    response = input("\nContinuar? (s/N): ").lower().strip()
    if response not in ['s', 'sim', 'y', 'yes']:
        print("Setup cancelado.")
        return
    
    # Construir e iniciar
    if not build_and_start():
        print("\n‚ùå Erro durante o build/start")
        return
    
    # Aguardar servi√ßos
    wait_for_services()
    
    # Mostrar pr√≥ximos passos
    show_next_steps()

if __name__ == "__main__":
    main()